!==============================================================================!
  subroutine Grad_Component(Flow, Grid, phi, i, phii)
!------------------------------------------------------------------------------!
  implicit none
!---------------------------------[Arguments]----------------------------------!
  class(Field_Type), intent(in)    :: Flow  !! parent flow object
  type(Grid_Type),   intent(in)    :: Grid  !! grid object
  real,              intent(inout) :: phi (-Grid % n_bnd_cells:Grid % n_cells)
  integer,           intent(in)    :: i     !! gradient component (1 to 3)
  real,              intent(out)   :: phii(-Grid % n_bnd_cells:Grid % n_cells)
!-----------------------------------[Locals]-----------------------------------!
  integer :: c, d, i_cel
  real    :: dphi, dx, dy, dz
!-----------------------------[Local parameters]-------------------------------!
  integer, dimension(3,3), parameter :: MAP = reshape((/ 1, 4, 5,  &
                                                         4, 2, 6,  &
                                                         5, 6, 3 /), shape(MAP))
!==============================================================================!

  ! Aret these checks overkill?
  Assert(i > 0)
  Assert(i < 4)

  ! Initialize gradients
  phii(:) = 0.0

  ! Try to estimate gradients cell-wise
  ! (face-wise leades to race conditions on GPUs)
  !$acc kernels
  do c = 1, Grid % n_cells
    do i_cel = 1, Grid % cells_n_cells(c)
      d = Grid % cells_c(i_cel, c)
      dphi = phi(d)-phi(c)
      dx   = Grid % xc(d) - Grid % xc(c)
      dy   = Grid % yc(d) - Grid % yc(c)
      dz   = Grid % zc(d) - Grid % zc(c)

      phii(c) = phii(c)                                       &
               + dphi * (  Flow % grad_c2c(MAP(i,1),c) * dx   &
                         + Flow % grad_c2c(MAP(i,2),c) * dy   &
                         + Flow % grad_c2c(MAP(i,3),c) * dz)
    end do
  end do
  !$acc end kernels

  ! What compiler said about the above fraction:
  ! grad_component:
  !      37, include 'Grad_Component.f90'
  !           29, Generating implicit copyin(flow%grad_c2c(:,:),grid,grid%zc(:),grid%cells_n_cells(:),grid%xc(:),grid%yc(:),flow) [if not already present]
  !               Generating implicit copy(phii(:)) [if not already present]
  !               Generating implicit copyin(phi(:),grid%cells_c(:,:)) [if not already present]
  !           30, Loop is parallelizable
  !               Generating NVIDIA GPU code
  !               30, !$acc loop gang, vector(128) ! blockidx%x threadidx%x
  !               31, !$acc loop seq
  !           31, Complex loop carried dependence of phii prevents parallelization
  !               Loop carried dependence of phii prevents parallelization
  !               Loop carried backward dependence of phii prevents vectorization
  !               Inner sequential loop scheduled on accelerator
  !               Generating implicit private(dz,dy,dx,dphi,d)
  !               Complex loop carried dependence of phii prevents parallelization

  end subroutine
